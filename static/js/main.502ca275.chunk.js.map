{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","Weather","weatherData","imgUrl","process","weather","icon","className","name","moment","format","onClick","description","src","alt","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","long","setLong","data","setData","lat","setLat","url","fetchData","a","fetch","response","json","result","console","log","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAOMA,EAAU,WACdC,OAAOC,SAASC,UAmCHC,EA9BC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACXC,EAAM,UAAMC,oCAA8BF,EAAYG,QAAQ,GAAGC,KAAK,QAC5E,OACE,sBAAKC,UAAU,MAAf,UACA,sBAAKA,UAAU,cAAf,UACE,8BAAIL,EAAYM,KAAhB,MAAyBC,MAASC,OAAO,QAAzC,KAAoDD,MAASC,OAAO,SACpE,cAAC,IAAD,CAAwBC,QAASd,EAASU,UAAU,cAGtD,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,UAAb,SAAwBL,EAAYG,QAAQ,GAAGO,cAC/C,qBAAKC,IAAKV,EAAQW,IAAKZ,EAAYG,QAAQ,GAAGO,iBAGhD,sBAAKL,UAAU,eAAf,UACA,8CAAiBL,EAAYa,KAAKC,KAAlC,WACA,2CAAcd,EAAYa,KAAKE,SAA/B,UAEA,sBAAKV,UAAU,eAAf,UACA,0CACY,IAAIW,KAA+B,IAA1BhB,EAAYiB,IAAIC,SAAgBC,mBAAmB,YAExE,yCACW,IAAIH,KAA8B,IAAzBhB,EAAYiB,IAAIG,QAAeD,mBAAmB,mBChC3D,SAASE,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsBJ,mBAAS,IAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAEMC,EAAG,UAAM3B,kDAAN,gBAA2CyB,EAA3C,gBAAsDJ,EAAtD,+BAAiFrB,oCACpF4B,EAAS,uCAAG,8BAAAC,EAAA,+EAESC,MAAMH,GAFf,cAERI,EAFQ,gBAGOA,EAASC,OAHhB,OAGRC,EAHQ,OAIdT,EAAQS,GAJM,kDAOdC,QAAQC,IAAR,MAPc,0DAAH,qDAmBf,OARAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAoB,SAACC,GACzCd,EAAOc,EAASC,OAAOC,UACvBpB,EAAQkB,EAASC,OAAOE,cAE1Bf,MACC,CAACH,EAAKJ,IAGP,qBAAKlB,UAAU,OAAf,SACwB,oBAAboB,EAAKZ,KAAqB,cAAC,EAAD,CAASb,YAAayB,IAAQ,oEC/BvE,IAYeqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.502ca275.chunk.js","sourcesContent":["import React from \"react\";\r\n// import {Button } from \"semantic-ui-react\";\r\n// import \"semantic-ui-css/semantic.min.css\";\r\nimport moment from \"moment\";\r\nimport \"./styles.css\";\r\nimport {IoRefreshCircleOutline} from \"react-icons/io5\";\r\n\r\nconst refresh = () => {\r\n  window.location.reload();\r\n};\r\n\r\n\r\n\r\nconst Weather = ({ weatherData }) => {\r\n  const imgUrl = `${process.env.REACT_APP_API_IMG+weatherData.weather[0].icon+\".png\"}`\r\n  return(\r\n    <div className=\"box\">\r\n    <div className=\"flex header\">\r\n      <p>{weatherData.name},  {moment().format(\"dddd\")}, {moment().format(\"LL\")}</p>\r\n      <IoRefreshCircleOutline onClick={refresh} className=\"button\"/>\r\n    </div>\r\n\r\n    <div className=\"flex-center day\">\r\n      <p className=\"weather\">{weatherData.weather[0].description}</p>\r\n      <img src={imgUrl} alt={weatherData.weather[0].description}/>\r\n    </div>\r\n\r\n    <div className=\"flex details\">\r\n    <p>Temperature: {weatherData.main.temp}&deg;C</p>\r\n    <p>Humidity: {weatherData.main.humidity}%</p>\r\n    </div>\r\n    <div className=\"flex details\">\r\n    <p>\r\n      Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString(\"en-IN\")}\r\n    </p>\r\n    <p>\r\n      Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(\"en-IN\")}\r\n    </p>\r\n    </div>\r\n  </div>\r\n  );\r\n  };\r\n\r\nexport default Weather;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Weather from \"./components/weather\";\n\nexport default function App() {\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  const [lat, setLat] = useState([]);\n\n  const url = `${process.env.REACT_APP_API_URL}?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\n  const fetchData = async () => {\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      setData(result);\n      // console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition( (position) => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n    fetchData();\n  }, [lat, long]);\n\n  return (\n    <div className=\"main\">\n      {(typeof data.main != 'undefined')?<Weather weatherData={data}/>:<div>Please turn on your location...</div>}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}